@model EntityLayer.Concrete.UserPatientViewModel

@{
    Layout = null;
}
<head>
    <link rel="stylesheet" type="text/css" href="~/Content/patientlogin.css">
</head>
<div class="login-wrap">
    <div class="login-html">
        <input id="tab-1" type="radio" name="tab" class="sign-in" checked><label for="tab-1" class="tab">Sign In</label>
        <input id="tab-2" type="radio" name="tab" class="sign-up"><label for="tab-2" class="tab">Sign Up</label>
        <div class="login-form">
            <div class="sign-in-htm">
                @using (Html.BeginForm("PatientLogin", "Login", FormMethod.Post, new { id = "loginForm" }))
                {
                    <div class="group">
                        <label for="user" class="label">Email</label>
                        <input id="user" type="text" name="userEmail" class="input">
                    </div>
                    <div class="group">
                        <label for="pass" class="label">Password</label>
                        <input id="pass" type="password" name="userPassword" class="input" data-type="password">
                    </div>
                    <div class="group">
                        <input type="submit" class="button" value="Sign In">
                    </div>
                    <div class="hr"></div>

                }
            </div>
            <div class="sign-up-htm">
                @using (Html.BeginForm("PatientSignUp", "Login", FormMethod.Post))
                {
                    <div style="height:500px; overflow-y:scroll; overflow-x:hidden;">
                        <form onsubmit="return validateForm()">
                            <div class="group">
                                <label for="user" class="label">Patient Prename</label>
                                <input id="user" type="text" name="userPreName" pattern="^[a-zA-ZğüışöçĞÜİŞÖÇ]+$" title="Pre name can only contain letters" class="input" required>
                                @Html.ValidationMessageFor(x => x.user.userPreName)
                            </div>
                            <div class="group">
                                <label for="user" class="label">Patient Lastname</label>
                                <input id="user" type="text" name="userLastName" pattern="^[a-zA-ZğüışöçĞÜİŞÖÇ]+$" title="Pre name can only contain letters" class="input" required>
                                @Html.ValidationMessageFor(x => x.user.userLastName)
                            </div>
                            <div class="group">
                                <label for="user" class="label">Patient Email</label>
                                <input type="email" name="userEmail" id="userEmail" class="input" required><br>
                                @Html.ValidationMessageFor(x => x.user.userEmail)
                            </div>
                            <div class="group">
                                <label for="user" class="label">Password</label>
                                <input id="user" type="text" name="userPassword" class="input" required>
                                @Html.ValidationMessageFor(x => x.user.userPassword)
                            </div>
                            <div class="group">
                                <label for="user" class="label">Patient Birth Date</label>
                                <input id="user" type="date" name="patientBirthDate" class="input" required>
                                @Html.ValidationMessageFor(x => x.patient.patientBirthDate)
                            </div>
                            <div class="group">
                                <label for="user" class="label">Patient Social Security Number</label>
                                <input type="text" name="patientSocSecNo" id="patientSocSecNo" title="The social security number must be 9 digits! Please enter a 9 digit number." pattern="[0-9]{9}" class="input" required><br>
                                @Html.ValidationMessageFor(x => x.patient.patientSocSecNo)
                            </div>
                            <div class="group">
                                <input type="submit" class="button" value="Sign Up">
                            </div>
                            <div class="foot-lnk">
                                <label for="tab-1">Already Member?</label>
                            </div>
                        </form>
                    </div>
                }
            </div>
        </div>
    </div>
</div>






<script>
    document.getElementById('loginForm').addEventListener('submit', function (event) {
        event.preventDefault();

        var formData = new FormData(event.target);

        // Send a POST request to the server to check the login credentials
        fetch('/Login/PatientLogin', {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                // If the login was unsuccessful, display a pop-up message
                if (!data.success) {
                    alert(data.error);
                }

                // If the login was successful, check for a redirect response from the server
                if (data.success) {
                    window.location.href = '/User/Index';
                }
            });
    });

    function validateForm() {
        var socSecNo = document.getElementById('patientSocSecNo').value;
        if (socSecNo == '') {
            alert('Social security number field cannot be left blank!');
            return false;
        }
        if (!/^\d{9}$/.test(socSecNo)) {
            alert('The social security number must be 9 digits! Please enter a 9 digit number.');
            return false;

        }
        var email = document.getElementById("userEmail").value;
        var lblError = document.getElementById("lblError");
        lblError.innerHTML = "";
        var expr = /^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
        if (!expr.test(email)) {
            lblError.innerHTML = "Invalid email address.";
        }
        return true;
    }
</script>