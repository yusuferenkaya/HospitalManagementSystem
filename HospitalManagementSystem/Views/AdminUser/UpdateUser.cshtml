@model EntityLayer.Concrete.User
@{
    ViewBag.Title = "UpdateUser";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h3>Update User</h3>

@using (Html.BeginForm("UpdateUser", "AdminUser", FormMethod.Post))
{
    @Html.HiddenFor(x => x.userID)
    <div class="form-group">
        @Html.Label("User Pre Name")
        @Html.TextBoxFor(x => x.userPreName, new { @class = "form-control", pattern = @"^[a-zA-ZğüışöçĞÜİŞÖÇ]+$", title = "Pre name can only contain letters", @required = "required" })
        <br />
        @Html.Label("User Last Name")
        @Html.TextBoxFor(x => x.userLastName, new { @class = "form-control", pattern = @"^[a-zA-ZğüışöçĞÜİŞÖÇ]+$", title = "Last name can only contain letters", @required = "required" })
        <br />
        <label for="userEmail">Email:</label><br>
        <input type="email" name="userEmail" id="userEmail" required><br>
        <br />
        @Html.Label("User Password")
        @Html.TextBoxFor(x => x.userPassword, new { @class = "form-control", @required = "required" })
        <br />



        <br />
        <button class="btn btn-success">Update</button>
    </div>
}


<script>
    var email = document.getElementById("userEmail").value;
    var lblError = document.getElementById("lblError");
    lblError.innerHTML = "";
    var expr = /^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
    if (!expr.test(email)) {
        lblError.innerHTML = "Invalid email address.";
    }
    return true;


</script>